using Genius.Atom.Data.Persistence;
using Genius.Atom.Infrastructure.Entities;
using Genius.Atom.Infrastructure.TestingUtil;
using Genius.Atom.Infrastructure.TestingUtil.Events;
using Genius.PriceChecker.Core.Models;
using Genius.PriceChecker.Core.Repositories;

namespace Genius.PriceChecker.Core.Tests.Repositories;

public class ProductRepositoryTests
{
    private readonly ProductRepository _sut;
    private readonly FakeEventBus _eventBus = new();
    private readonly IJsonPersister _persisterMock = A.Fake<IJsonPersister>();
    private readonly IAgentQueryService _agentQueryMock = A.Fake<IAgentQueryService>();

    private readonly Product[] _products;
    private readonly Agent[] _agents;

    public ProductRepositoryTests()
    {
        _products = ModelHelpers.SampleManyProducts().ToArray();
        _agents = ModelHelpers.SampleManyAgents(_products).ToArray();

        foreach (var agent in _agents)
            A.CallTo(() => _agentQueryMock.FindByKeyAsync(agent.Key)).Returns(agent);

        A.CallTo(() => _persisterMock.LoadCollection<Product>(A<string>._))
            .Returns(_products);

        _sut = new ProductRepository(_eventBus, _persisterMock, _agentQueryMock, new FakeLogger<ProductRepository>());

        _sut.GetAllAsync().GetAwaiter().GetResult(); // To trigger the initializer
    }

    [Fact]
    public async Task GetAll__Returns_all_loaded_products()
    {
        // Act
        var result = await _sut.GetAllAsync();

        // Verify
        Assert.Equal(_products, result);
    }

    [Fact]
    public async Task FindById__Returns_appropriate_product()
    {
        // Arrange
        var productToFind = _products[1];

        // Act
        var result = await _sut.FindByIdAsync(productToFind.Id);

        // Verify
        Assert.Equal(productToFind, result);
    }

    [Fact]
    public async Task Delete__Removes_appropriate_product()
    {
        // Arrange
        var productToDelete = _products[1];

        // Act
        await _sut.DeleteAsync(productToDelete.Id);

        // Verify
        Assert.Null(await _sut.FindByIdAsync(productToDelete.Id));
    }

    [Fact]
    public async Task Delete__When_no_product_found__Breaks_operation()
    {
        // Arrange
        var productCount = (await _sut.GetAllAsync()).Count();

        // Act
        await _sut.DeleteAsync(Guid.NewGuid());

        // Verify
        Assert.Equal(productCount, (await _sut.GetAllAsync()).Count());
    }

    [Fact]
    public async Task Store__For_existing_product__Saves_it_and_fires_event()
    {
        // Arrange
        var product = _products[1];

        // Act
        await _sut.StoreAsync(product);

        // Verify
        A.CallTo(() => _persisterMock.Store(A<string>._, A<IEnumerable<Product>>.That.IsSameSequenceAs(_products)))
            .MustHaveHappenedOnceExactly();
        _eventBus.AssertSingleEvent<EntitiesAffectedEvent>(e => e.Updated.First().Key == product.Id);
    }

    [Fact]
    public async Task Store__For_nonexisting_product__Adds_it_and_fires_event()
    {
        // Arrange
        var product = ModelHelpers.SampleProduct(_agents);
        var productCount = (await _sut.GetAllAsync()).Count();

        // Act
        await _sut.StoreAsync(product);

        // Verify
        var expectedProducts = _products.Concat(new [] { product });
        A.CallTo(() => _persisterMock.Store(A<string>._, A<IEnumerable<Product>>.That.IsSameSequenceAs(expectedProducts)))
            .MustHaveHappenedOnceExactly();
        _eventBus.AssertSingleEvent<EntitiesAffectedEvent>(e => e.Added.First().Key == product.Id);
        Assert.Equal(productCount + 1, (await _sut.GetAllAsync()).Count());
    }

    [Fact]
    public async Task Store__When_id_is_empty__Adds_product_with_autogenerated_id()
    {
        // Arrange
        var product = ModelHelpers.SampleProduct(_agents);
        // TODO: product.Id = Guid.Empty;
        var productCount = (await _sut.GetAllAsync()).Count();

        // Act
        await _sut.StoreAsync(product);

        // Verify
        Assert.NotEqual(Guid.Empty, product.Id);
        Assert.Equal(productCount + 1, (await _sut.GetAllAsync()).Count());
    }

    [Fact]
    public void Constructor__Loads_and_fills_up_relations()
    {
        // Act (done in the test constructor)

        // Verify
        foreach (var product in _products)
        {
            foreach (var source in product.Sources)
            {
                Assert.Equal(source.AgentKey, source.Agent.Key);
                Assert.Equal(product, source.Product);
            }
            foreach (var price in product.Recent)
            {
                Assert.Equal(product.Sources.First(x => x.Id == price.ProductSourceId), price.ProductSource);
            }
        }
    }
}
