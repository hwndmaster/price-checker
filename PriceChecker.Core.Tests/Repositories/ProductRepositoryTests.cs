using System;
using System.Collections.Generic;
using System.Linq;
using AutoFixture;
using Genius.PriceChecker.Core.Messages;
using Genius.PriceChecker.Core.Models;
using Genius.PriceChecker.Core.Repositories;
using Genius.PriceChecker.Core.Services;
using Genius.PriceChecker.Infrastructure.Events;
using Microsoft.Extensions.Logging;
using Moq;
using Xunit;

namespace Genius.PriceChecker.Core.Tests.Repositories
{
    public class ProductRepositoryTests
    {
        private readonly ProductRepository _sut;
        private readonly Fixture _fixture = new();
        private readonly Mock<IEventBus> _eventBusMock = new();
        private readonly Mock<IPersister> _persisterMock = new();
        private readonly Mock<IAgentRepository> _agentRepoMock = new();

        private readonly List<Product> _products = new();
        private readonly List<Agent> _agents = new();

        public ProductRepositoryTests()
        {
            _products.AddRange(Enumerable.Range(1, 3).Select(_ => CreateProduct()));
            _agents = _products.SelectMany(x => x.Sources)
                .Select(x => new Agent { Id = x.AgentId }).ToList();

            foreach (var agent in _agents)
                _agentRepoMock.Setup(x => x.FindById(agent.Id)).Returns(agent);

            _persisterMock.Setup(x => x.LoadCollection<Product>(It.IsAny<string>()))
                .Returns(_products.ToArray());

            _sut = new ProductRepository(_eventBusMock.Object, _persisterMock.Object,
                _agentRepoMock.Object,
                Mock.Of<ILogger<ProductRepository>>());
        }

        [Fact]
        public void GetAll__Returns_all_loaded_products()
        {
            // Act
            var result = _sut.GetAll();

            // Verify
            Assert.Equal(_products, result);
        }

        [Fact]
        public void FindById__Returns_appropriate_product()
        {
            // Arrange
            var productToFind = _products[1];

            // Act
            var result = _sut.FindById(productToFind.Id);

            // Verify
            Assert.Equal(productToFind, result);
        }

        [Fact]
        public void Delete__Removes_appripriate_product()
        {
            // Arrange
            var productToDelete = _products[1];

            // Act
            _sut.Delete(productToDelete.Id);

            // Verify
            Assert.Null(_sut.FindById(productToDelete.Id));
        }

        [Fact]
        public void Delete__When_no_product_found__Breaks_operation()
        {
            // Arrange
            var productCount = _sut.GetAll().Count();

            // Act
            _sut.Delete(Guid.NewGuid());

            // Verify
            Assert.Equal(productCount, _sut.GetAll().Count());
        }

        [Fact]
        public void Store__For_existing_product__Saves_it_and_fires_event()
        {
            // Arrange
            var product = _products[1];

            // Act
            _sut.Store(product);

            // Verify
            _persisterMock.Verify(x => x.Store(It.IsAny<string>(),
                It.Is<List<Product>>((List<Product> p) => p.SequenceEqual(_products))));
            _eventBusMock.Verify(x => x.Publish(It.Is<ProductUpdatedEvent>(e => e.Product == product)), Times.Once);
        }

        [Fact]
        public void Store__For_nonexisting_product__Adds_it_and_fires_event()
        {
            // Arrange
            var product = CreateProduct();
            var productCount = _sut.GetAll().Count();

            // Act
            _sut.Store(product);

            // Verify
            var expectedProducts = _products.Concat(new [] { product });
            _persisterMock.Verify(x => x.Store(It.IsAny<string>(),
                It.Is<List<Product>>((List<Product> p) => p.SequenceEqual(expectedProducts))));
            _eventBusMock.Verify(x => x.Publish(It.Is<ProductAddedEvent>(e => e.Product == product)), Times.Once);
            Assert.Equal(productCount + 1, _sut.GetAll().Count());
        }

        [Fact]
        public void Store__When_id_is_empty__Adds_product_with_autogenerated_id()
        {
            // Arrange
            var product = CreateProduct();
            product.Id = Guid.Empty;
            var productCount = _sut.GetAll().Count();

            // Act
            _sut.Store(product);

            // Verify
            Assert.NotEqual(Guid.Empty, product.Id);
            Assert.Equal(productCount + 1, _sut.GetAll().Count());
        }

        [Fact]
        public void Constructor__Loads_and_fills_up_relations()
        {
            // Act (done in the test constructor)

            // Verify
            foreach (var product in _products)
            {
                foreach (var source in product.Sources)
                {
                    Assert.Equal(source.AgentId, source.Agent.Id);
                    Assert.Equal(product, source.Product);
                }
                foreach (var price in product.Recent)
                {
                    Assert.Equal(product.Sources.First(x => x.Id == price.ProductSourceId), price.ProductSource);
                }
            }
        }

        private Product CreateProduct()
        {
            var product = _fixture.Create<Product>();
            foreach (var r in product.Recent.Zip(product.Sources))
                r.First.ProductSourceId = r.Second.Id;
            return product;
        }
    }
}
